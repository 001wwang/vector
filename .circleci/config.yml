#
# Run macros
#

install-cargo-deb: &install-cargo-deb
  run:
    name: Install cargo deb
    command: |
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo install cargo-deb

install-rpm: &install-rpm
  run:
    name: Install RPM package
    command: |
      sudo apt-get install -y rpm

install-rust: &install-rust
  run:
    name: Install Rust
    command: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

restore-artifacts-from-workspace: &restore-artifacts-from-workspace
  attach_workspace:
    at: target/artifacts

#
# Main document
#

version: 2

jobs:
  #
  # Testing
  #

  rustfmt:
    docker:
      - image: timberio/vector-tester:latest
    steps:
      - checkout
      - run:
          name: Check formatting
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check

  check-stable:
    resource_class: large
    docker:
      - image: timberio/vector-tester:latest
    steps:
      - checkout
      - run:
          name: Check
          environment:
            RUSTFLAGS: "-D warnings"
          command: |
            cargo check --all --all-features --all-targets

  test-stable:
    resource_class: xlarge
    docker:
      - image: timberio/vector-tester:latest
        environment:
          RUST_BACKTRACE: full
          AWS_ACCESS_KEY_ID: "fake-aws-key"
          AWS_SECRET_ACCESS_KEY: "fake-aws-key"
      - image: localstack/localstack:latest
        environment:
          DATA_DIR: /tmp/localstack/data
          DEBUG: 1
          PORT_WEB_UI: 8888
          SERVICES: kinesis
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: "test-access-key"
          MINIO_SECRET_KEY: "test-secret-key"
        command: server /tmp
      - image: luciofranco/mockwatchlogs:latest
      - image: spotify/kafka
        environment:
          ADVERTISED_HOST: localhost
          ADVERTISED_PORT: 9092
      - image: timberio/splunk-hec-test:latest
      - image: elasticsearch:6.6.2
        environment:
          - discovery.type=single-node
    steps:
      - checkout
      - run:
          name: Test
          command: make test
      - store_test_results:
          path: ./test-results

  #
  # Building - Archives
  #

  build-x86_64-apple-darwin:
    resource_class: large
    macos:
      xcode: "9.0"
    environment:
      TARGET: "x86_64-apple-darwin"
      BUILDER: "cargo"
    steps:
      - checkout
      - *install-rust
      - run:
          name: Build archive
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            export VERSION=$(make version)
            make build
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-apple-darwin.tar.gz"

  build-x86_64-unknown-linux-gnu:
    docker:
      - image: timberio/vector-builder-x86_64-unknown-linux-gnu:latest
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Build archive
          command: |
            export VERSION=$(make version)
            git --version
            echo $VERSION
            make build
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-unknown-linux-gnu.tar.gz"

  #
  # Packaging
  #

  package-deb:
    docker:
      - image: timberio/vector-packager-deb:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Build deb package
          command: |
            export VERSION=$(make version)
            make package-deb
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*.deb"

  package-rpm:
    docker:
      - image: timberio/vector-packager-rpm:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Build deb package
          command: |
            export VERSION=$(make version)
            make package-rpm
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*.rpm"

  #
  # Verifying
  #

  verify-deb-on-deb-9:
    docker:
      - image: timberio/vector-verifier-deb-9:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          command: apt-get update
      - run:
          command: apt-get install ca-certificates
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-rpm-on-centos-7:
    docker:
      - image: centos:7
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  #
  # Releasing
  #

  release-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Build
          command: |
            export VERSION=$(make version)
            docker build -t timberio/vector:$VERSION .
            docker build -t timberio/vector:latest .
      - run:
          name: Push
          command: |
            export VERSION=$(make version)
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push timberio/vector:$VERSION
            docker push timberio/vector:latest

  release-github:
    docker:
      - image: timberio/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Upload
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            grease create-release timberio/vector $VERSION $CIRCLE_SHA1 --assets "target/artifacts/*"

  release-package-cloud:
    docker:
      - image: timberio/vector-releaser:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Upload to Package Cloud
          command: |
            package_cloud push timberio/packages target/artifacts/*.deb
            package_cloud push timberio/packages target/artifacts/*.rpm

  release-s3:
    docker:
      - image: timberio/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Upload to S3
          command: |
            export VERSION=$(make versiono)
            echo "Releasing $VERSION..."
            aws s3 cp "target/artifacts/" "s3://packages.timber.io/vector/$VERSION/" --recursive

            # Update the "latest" files
            aws s3 rm --recursive s3://packages.timber.io/vector/latest/
            rename -v "s/$VERSION/latest/" target/artifacts/*
            aws s3 cp "target/artifacts/" "s3://packages.timber.io/vector/latest/" --recursive

test-workflow-filters: &test-workflow-filters
  filters:
    branches:
      only: /.*/
    tags:
      ignore: /.*/

compile-workflow-filters: &compile-workflow-filters
  filters:
    branches:
      only: /.*/ # master
    tags:
      only: /v.*/

tag-release-workflow-filters: &tag-release-workflow-filters
  filters:
    branches:
      only: /.*/ #ignore: /.*/
    tags:
      only: /v.*/

workflows:
  version: 2

  build:
    jobs:
      # - rustfmt:
      #     <<: *test-workflow-filters
      # - check-stable:
      #     <<: *test-workflow-filters
      # - test-stable:
      #     <<: *test-workflow-filters
      - build-x86_64-unknown-linux-gnu:
          <<: *compile-workflow-filters
          # requires:
          #   - rustfmt
          #   - check-stable
          #   - test-stable
      - build-x86_64-apple-darwin:
          <<: *compile-workflow-filters
          # requires:
          #   - rustfmt
          #   - check-stable
          #   - test-stable
      - package-deb:
          <<: *tag-release-workflow-filters
          requires:
            - build-x86_64-unknown-linux-gnu
            - build-x86_64-apple-darwin
      - package-rpm:
          <<: *tag-release-workflow-filters
          requires:
            - build-x86_64-unknown-linux-gnu
            - build-x86_64-apple-darwin
      - verify-deb-on-deb-9:
          <<: *tag-release-workflow-filters
          requires:
            - package-deb
      - verify-rpm-on-centos-7:
          <<: *tag-release-workflow-filters
          requires:
            - package-rpm
      - release-docker:
          <<: *tag-release-workflow-filters
          requires:
            - verify-deb-on-deb-9
            - verify-rpm-on-centos-7
      - release-github:
          <<: *tag-release-workflow-filters
          requires:
            - verify-deb-on-deb-9
            - verify-rpm-on-centos-7
      - release-package-cloud:
          <<: *compile-workflow-filters
          requires:
            - verify-deb-on-deb-9
            - verify-rpm-on-centos-7
      - release-s3:
          <<: *compile-workflow-filters
          requires:
            - verify-deb-on-deb-9
            - verify-rpm-on-centos-7
