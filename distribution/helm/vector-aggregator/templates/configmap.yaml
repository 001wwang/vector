{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "libvector.configMapName" . }}
  labels:
    {{- include "libvector.labels" . | nindent 4 }}
data:
  {{- if .Values.customConfig }}
  vector.yaml: |
{{ tpl (toYaml .Values.customConfig) . | indent 4 }}
  # Included to ensure no duplicate configurations created by deprecated values
  {{- else }}
  vector.yaml: |
    # Docs: https://vector.dev/docs/
    {{- if not .Values.globalOptions.dataDir }}
    data_dir: "/vector-data-dir"
    {{- end }}
    timezone: local
    healthchecks:
      enabled: true
      require_healthy: false
    {{- if not .Values.logSchema }}
    log_schema:
      host_key: host
      message_key: message
      source_type_key: source_type
      timestamp_key: timestamp
    {{- end }}
    {{- if not .Values.vectorApi }}
    api:
      address: 0.0.0.0:8686
      enabled: true
      playground: false
    {{- end }}
    {{- if or (.Values.vectorSource.enabled) (.Values.sources) }}
    sources:
    {{- if .Values.vectorSource.enabled }}
      {{- .Values.vectorSource.sourceId | nindent 6 }}:
        type: vector
        address: {{ .Values.vectorSource.listenAddress }}:{{ .Values.vectorSource.listenPort }}
        {{ toYaml .Values.vectorSource.config }}
    {{- end }}
    {{- end }}
    {{- if .Values.transforms }}
    transforms:
    {{- end }}
    {{- if .Values.sinks }}
    sinks:
    {{- end }}
  {{- end }}
  {{- if or (.Values.globalOptions.dataDir) (.Values.logSchema) (.Values.vectorApi) }}
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    {{- if or (.Values.globalOptions.dataDir) (.Values.logSchema) (.Values.vectorApi) }}
    {{- include "libvector.vectorConfigHeader" . | nindent 4 -}}
    {{- end }}

    {{- include "libvector.metricsConfigPartial" . | nindent 4  }}
  {{- end }}
{{- end }}
